"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSim = createSim;
exports.getExistingSim = getExistingSim;
exports.runSimulatorReset = runSimulatorReset;
exports.installToSimulator = installToSimulator;
exports.shutdownSimulator = shutdownSimulator;
exports.shutdownOtherSimulators = shutdownOtherSimulators;

require("source-map-support/register");

var _appiumIosSimulator = require("appium-ios-simulator");

var _nodeSimctl = _interopRequireDefault(require("node-simctl"));

var _appiumWebdriveragent = require("appium-webdriveragent");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _appiumSupport = require("appium-support");

var _desiredCaps = require("./desired-caps");

const APPIUM_SIM_PREFIX = 'appiumTest';

async function createSim(caps, platform = _desiredCaps.PLATFORM_NAME_IOS) {
  const udid = await new _nodeSimctl.default().createDevice(`${APPIUM_SIM_PREFIX}-${_uuidJs.default.create().toString().toUpperCase()}-${caps.deviceName}`, caps.deviceName, caps.platformVersion, {
    platform
  });
  return await (0, _appiumIosSimulator.getSimulator)(udid, {
    platform,
    checkExistence: false
  });
}

async function getExistingSim(opts) {
  let appiumTestDevice;

  for (const device of _lodash.default.values((await new _nodeSimctl.default().getDevices(opts.platformVersion)))) {
    if (device.name === opts.deviceName) {
      return await (0, _appiumIosSimulator.getSimulator)(device.udid, {
        platform: device.platform,
        checkExistence: false
      });
    }

    if (device.name.startsWith(APPIUM_SIM_PREFIX) && device.name.endsWith(opts.deviceName)) {
      appiumTestDevice = device;

      if (device.state === 'Booted') {
        break;
      }
    }
  }

  if (appiumTestDevice) {
    _logger.default.warn(`Unable to find device '${opts.deviceName}'. Found '${appiumTestDevice.name}' (udid: '${appiumTestDevice.udid}') instead`);

    return await (0, _appiumIosSimulator.getSimulator)(appiumTestDevice.udid, {
      platform: appiumTestDevice.platform,
      checkExistence: false
    });
  }

  return null;
}

async function shutdownSimulator(device) {
  await (0, _appiumWebdriveragent.resetTestProcesses)(device.udid, true);
  await device.shutdown();
}

async function runSimulatorReset(device, opts) {
  if (opts.noReset && !opts.fullReset) {
    _logger.default.debug('Reset: noReset is on. Leaving simulator as is');

    return;
  }

  if (!device) {
    _logger.default.debug('Reset: no device available. Skipping');

    return;
  }

  if (opts.fullReset) {
    _logger.default.debug('Reset: fullReset is on. Cleaning simulator');

    await shutdownSimulator(device);
    let isKeychainsBackupSuccessful = false;

    if (opts.keychainsExcludePatterns || opts.keepKeyChains) {
      isKeychainsBackupSuccessful = await device.backupKeychains();
    }

    await device.clean();

    if (isKeychainsBackupSuccessful) {
      await device.restoreKeychains(opts.keychainsExcludePatterns || []);

      _logger.default.info(`Successfully restored keychains after full reset`);
    } else if (opts.keychainsExcludePatterns || opts.keepKeyChains) {
      _logger.default.warn('Cannot restore keychains after full reset, because ' + 'the backup operation did not succeed');
    }
  } else if (opts.bundleId) {
    if (await device.isRunning()) {
      if (opts.enforceSimulatorShutdown) {
        await shutdownSimulator(device);
      } else {
        try {
          await device.simctl.terminateApp(opts.bundleId);
        } catch (err) {
          _logger.default.warn(`Reset: failed to terminate Simulator application with id "${opts.bundleId}"`);
        }
      }
    }

    if (opts.app) {
      _logger.default.info('Not scrubbing third party app in anticipation of uninstall');

      return;
    }

    const isSafari = (opts.browserName || '').toLowerCase() === 'safari';

    try {
      if (isSafari) {
        await device.cleanSafari();
      } else {
        await device.scrubCustomApp('', opts.bundleId);
      }
    } catch (err) {
      _logger.default.warn(err.message);

      _logger.default.warn(`Reset: could not scrub ${isSafari ? 'Safari browser' : 'application with id "' + opts.bundleId + '"'}. Leaving as is.`);
    }
  }
}

async function installToSimulator(device, app, bundleId, opts = {}) {
  if (!app) {
    _logger.default.debug('No app path is given. Nothing to install.');

    return;
  }

  const {
    noReset = true,
    newSimulator = false
  } = opts;

  if (!newSimulator && bundleId && (await device.isAppInstalled(bundleId))) {
    if (noReset) {
      _logger.default.debug(`App '${bundleId}' is already installed. No need to reinstall.`);

      return;
    }

    _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);

    await device.removeApp(bundleId);
  }

  _logger.default.debug(`Installing '${app}' on Simulator with UUID '${device.udid}'...`);

  try {
    await device.installApp(app);
  } catch (e) {
    _logger.default.info(`Got an error on '${app}' install: ${e.message}`);

    _logger.default.info('Retrying application install');

    await device.installApp(app);
  }

  _logger.default.debug('The app has been installed successfully.');
}

async function shutdownOtherSimulators(currentDevice) {
  const simctl = new _nodeSimctl.default();

  const allDevices = _lodash.default.flatMap(_lodash.default.values((await simctl.getDevices())));

  const otherBootedDevices = allDevices.filter(device => device.udid !== currentDevice.udid && device.state === 'Booted');

  if (_lodash.default.isEmpty(otherBootedDevices)) {
    _logger.default.info('No other running simulators have been detected');

    return;
  }

  _logger.default.info(`Detected ${otherBootedDevices.length} other running ${_appiumSupport.util.pluralize('Simulator', otherBootedDevices.length)}.` + `Shutting them down...`);

  for (const {
    udid
  } of otherBootedDevices) {
    await (0, _appiumWebdriveragent.resetTestProcesses)(udid, true);
    simctl.udid = udid;
    await simctl.shutdownDevice();
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
