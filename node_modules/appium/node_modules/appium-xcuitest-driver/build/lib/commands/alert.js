"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getAlertText = async function getAlertText() {
  try {
    return await this.proxyCommand('/alert/text', 'GET');
  } catch (err) {
    if (this.isWebContext()) {
      const alert = await this.getAlert();
      return await alert.getText();
    }

    throw err;
  }
};

commands.setAlertText = async function setAlertText(value) {
  if (_lodash.default.isString(value)) {
    value = value.split('');
  }

  try {
    return await this.proxyCommand('/alert/text', 'POST', {
      value
    });
  } catch (err) {
    if (this.isWebContext()) {
      const alert = await this.getAlert();
      return await alert.setText(value);
    }

    throw err;
  }
};

commands.postAcceptAlert = async function postAcceptAlert(opts = {}) {
  try {
    let params = {};

    if (opts.buttonLabel) {
      params.name = opts.buttonLabel;
    }

    return await this.proxyCommand('/alert/accept', 'POST', params);
  } catch (err) {
    if (!this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NoAlertOpenError();
    }

    let alert = await this.getAlert();

    if (alert.close) {
      return await alert.close();
    }

    await alert.ok();
  }
};

commands.postDismissAlert = async function postDismissAlert(opts = {}) {
  try {
    let params = {};

    if (opts.buttonLabel) {
      params.name = opts.buttonLabel;
    }

    return await this.proxyCommand('/alert/dismiss', 'POST', params);
  } catch (err) {
    if (!this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NoAlertOpenError();
    }

    let alert = await this.getAlert();

    if (alert.close) {
      return await alert.close();
    }

    await alert.cancel();
  }
};

commands.getAlertButtons = async function getAlertButtons() {
  try {
    return await this.proxyCommand('/wda/alert/buttons', 'GET');
  } catch (err) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }
};

commands.mobileHandleAlert = async function mobileHandleAlert(opts = {}) {
  switch (opts.action) {
    case 'accept':
      return await this.postAcceptAlert(opts);

    case 'dismiss':
      return await this.postDismissAlert(opts);

    case 'getButtons':
      return await this.getAlertButtons();

    default:
      throw new Error(`The 'action' value should be either 'accept', 'dismiss' or 'getButtons'. ` + `'${opts.action}' is provided instead.`);
  }
};

helpers.getAlert = async function getAlert() {
  const scrollViews = await this.findNativeElementOrElements('class name', 'XCUIElementTypeScrollView', true);

  if (scrollViews.length !== 1) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }

  const alert = scrollViews[0];
  const possibleAlertButtons = await this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, _appiumSupport.util.unwrapElement(alert));

  if (possibleAlertButtons.length < 1 || possibleAlertButtons.length > 2) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }

  const assertButtonName = async (button, expectedName = '') => {
    button = _appiumSupport.util.unwrapElement(button);
    const name = await this.proxyCommand(`/element/${button}/attribute/name`, 'GET');

    if ((name === null || name === void 0 ? void 0 : name.toLowerCase()) !== expectedName.toLowerCase()) {
      throw new _appiumBaseDriver.errors.NoAlertOpenError();
    }
  };

  if (possibleAlertButtons.length === 1) {
    const closeButton = possibleAlertButtons[0];
    await assertButtonName(closeButton, 'close');

    alert.close = async () => {
      await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(closeButton)}/click`, 'POST');
    };
  } else {
    const firstButton = possibleAlertButtons[0];
    await assertButtonName(firstButton, 'cancel');
    const secondButton = possibleAlertButtons[1];
    await assertButtonName(secondButton, 'ok');

    alert.cancel = async () => {
      await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(firstButton)}/click`, 'POST');
    };

    alert.ok = async () => {
      await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(secondButton)}/click`, 'POST');
    };
  }

  alert.getText = async () => {
    const textViews = await this.findNativeElementOrElements('class name', 'XCUIElementTypeTextView', true, _appiumSupport.util.unwrapElement(alert));
    return await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(_lodash.default.last(textViews))}/attribute/value`, 'GET');
  };

  alert.setText = async value => {
    const textViews = await this.findNativeElementOrElements('class name', 'XCUIElementTypeTextField', true, _appiumSupport.util.unwrapElement(alert));

    if (textViews.length === 0) {
      throw new Error('Tried to set text of an alert that was not a prompt');
    }

    await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(textViews[0])}/value `, 'POST', {
      value
    });
  };

  return alert;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9hbGVydC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZ2V0QWxlcnRUZXh0IiwicHJveHlDb21tYW5kIiwiZXJyIiwiaXNXZWJDb250ZXh0IiwiYWxlcnQiLCJnZXRBbGVydCIsImdldFRleHQiLCJzZXRBbGVydFRleHQiLCJ2YWx1ZSIsIl8iLCJpc1N0cmluZyIsInNwbGl0Iiwic2V0VGV4dCIsInBvc3RBY2NlcHRBbGVydCIsIm9wdHMiLCJwYXJhbXMiLCJidXR0b25MYWJlbCIsIm5hbWUiLCJlcnJvcnMiLCJOb0FsZXJ0T3BlbkVycm9yIiwiY2xvc2UiLCJvayIsInBvc3REaXNtaXNzQWxlcnQiLCJjYW5jZWwiLCJnZXRBbGVydEJ1dHRvbnMiLCJtb2JpbGVIYW5kbGVBbGVydCIsImFjdGlvbiIsIkVycm9yIiwic2Nyb2xsVmlld3MiLCJmaW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMiLCJsZW5ndGgiLCJwb3NzaWJsZUFsZXJ0QnV0dG9ucyIsInV0aWwiLCJ1bndyYXBFbGVtZW50IiwiYXNzZXJ0QnV0dG9uTmFtZSIsImJ1dHRvbiIsImV4cGVjdGVkTmFtZSIsInRvTG93ZXJDYXNlIiwiY2xvc2VCdXR0b24iLCJmaXJzdEJ1dHRvbiIsInNlY29uZEJ1dHRvbiIsInRleHRWaWV3cyIsImxhc3QiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7QUFBQSxJQUFtQkMsT0FBTyxHQUFHLEVBQTdCO0FBQUEsSUFBaUNDLFVBQVUsR0FBRyxFQUE5Qzs7OztBQUVBRixRQUFRLENBQUNHLFlBQVQsR0FBd0IsZUFBZUEsWUFBZixHQUErQjtBQUNyRCxNQUFJO0FBQ0YsV0FBTyxNQUFNLEtBQUtDLFlBQUwsQ0FBa0IsYUFBbEIsRUFBaUMsS0FBakMsQ0FBYjtBQUNELEdBRkQsQ0FFRSxPQUFP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Q0FBbUJRLFNBQVMsQ0FBQyxDQUFELENBQTVCLENBQWlDLFNBQS9ELEVBQXlFLE1BQXpFLEVBQWlGO0FBQUNqQyxNQUFBQTtBQUFELEtBQWpGLENBQU47QUFDRCxHQU5EOztBQVFBLFNBQU9KLEtBQVA7QUFDRCxDQXZFRDs7QUEwRUF1QyxNQUFNLENBQUNDLE1BQVAsQ0FBYzdDLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmdldEFsZXJ0VGV4dCA9IGFzeW5jIGZ1bmN0aW9uIGdldEFsZXJ0VGV4dCAoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvdGV4dCcsICdHRVQnKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAgIGNvbnN0IGFsZXJ0ID0gYXdhaXQgdGhpcy5nZXRBbGVydCgpO1xuICAgICAgcmV0dXJuIGF3YWl0IGFsZXJ0LmdldFRleHQoKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyO1xuICB9XG59O1xuXG5jb21tYW5kcy5zZXRBbGVydFRleHQgPSBhc3luYyBmdW5jdGlvbiBzZXRBbGVydFRleHQgKHZhbHVlKSB7XG4gIGlmIChfLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoJycpO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvdGV4dCcsICdQT1NUJywge3ZhbHVlfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgICBjb25zdCBhbGVydCA9IGF3YWl0IHRoaXMuZ2V0QWxlcnQoKTtcbiAgICAgIHJldHVybiBhd2FpdCBhbGVydC5zZXRUZXh0KHZhbHVlKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyO1xuICB9XG59O1xuXG5jb21tYW5kcy5wb3N0QWNjZXB0QWxlcnQgPSBhc3luYyBmdW5jdGlvbiBwb3N0QWNjZXB0QWxlcnQgKG9wdHMgPSB7fSkge1xuICB0cnkge1xuICAgIGxldCBwYXJhbXMgPSB7fTtcbiAgICBpZiAob3B0cy5idXR0b25MYWJlbCkge1xuICAgICAgcGFyYW1zLm5hbWUgPSBvcHRzLmJ1dHRvbkxhYmVsO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9hbGVydC9hY2NlcHQnLCAnUE9TVCcsIHBhcmFtcyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob0FsZXJ0T3BlbkVycm9yKCk7XG4gICAgfVxuXG4gICAgbGV0IGFsZXJ0ID0gYXdhaXQgdGhpcy5nZXRBbGVydCgpO1xuICAgIGlmIChhbGVydC5jbG9zZSkge1xuICAgICAgcmV0dXJuIGF3YWl0IGFsZXJ0LmNsb3NlKCk7XG4gICAgfVxuICAgIGF3YWl0IGFsZXJ0Lm9rKCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLnBvc3REaXNtaXNzQWxlcnQgPSBhc3luYyBmdW5jdGlvbiBwb3N0RGlzbWlzc0FsZXJ0IChvcHRzID0ge30pIHtcbiAgdHJ5IHtcbiAgICBsZXQgcGFyYW1zID0ge307XG4gICAgaWYgKG9wdHMuYnV0dG9uTGFiZWwpIHtcbiAgICAgIHBhcmFtcy5uYW1lID0gb3B0cy5idXR0b25MYWJlbDtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvZGlzbWlzcycsICdQT1NUJywgcGFyYW1zKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLk5vQWxlcnRPcGVuRXJyb3IoKTtcbiAgICB9XG5cbiAgICBsZXQgYWxlcnQgPSBhd2FpdCB0aGlzLmdldEFsZXJ0KCk7XG4gICAgaWYgKGFsZXJ0LmNsb3NlKSB7XG4gICAgICByZXR1cm4gYXdhaXQgYWxlcnQuY2xvc2UoKTtcbiAgICB9XG4gICAgYXdhaXQgYWxlcnQuY2FuY2VsKCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmdldEFsZXJ0QnV0dG9ucyA9IGFzeW5jIGZ1bmN0aW9uIGdldEFsZXJ0QnV0dG9ucyAoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvd2RhL2FsZXJ0L2J1dHRvbnMnLCAnR0VUJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm9BbGVydE9wZW5FcnJvcigpO1xuICB9XG59O1xuXG5jb21tYW5kcy5tb2JpbGVIYW5kbGVBbGVydCA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZUhhbmRsZUFsZXJ0IChvcHRzID0ge30pIHtcbiAgc3dpdGNoIChvcHRzLmFjdGlvbikge1xuICAgIGNhc2UgJ2FjY2VwdCc6XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3N0QWNjZXB0QWxlcnQob3B0cyk7XG4gICAgY2FzZSAnZGlzbWlzcyc6XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3N0RGlzbWlzc0FsZXJ0KG9wdHMpO1xuICAgIGNhc2UgJ2dldEJ1dHRvbnMnOlxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QWxlcnRCdXR0b25zKCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlICdhY3Rpb24nIHZhbHVlIHNob3VsZCBiZSBlaXRoZXIgJ2FjY2VwdCcsICdkaXNtaXNzJyBvciAnZ2V0QnV0dG9ucycuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGAnJHtvcHRzLmFjdGlvbn0nIGlzIHByb3ZpZGVkIGluc3RlYWQuYCk7XG4gIH1cbn07XG5cbmhlbHBlcnMuZ2V0QWxlcnQgPSBhc3luYyBmdW5jdGlvbiBnZXRBbGVydCAoKSB7XG4gIC8vIHRoZSBhbGVydCBvdWdodCB0byBiZSB0aGUgZmlyc3Qgc2Nyb2xsIHZpZXcsIGJ1dCB3ZSBkbyBub3Qgd2FudCB0b1xuICAvLyB3YWl0IGZvciBhbnkgaW1wbGljaXQgd2FpdCBzbyBnZXQgbXVsdGlwbGVcbiAgY29uc3Qgc2Nyb2xsVmlld3MgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnY2xhc3MgbmFtZScsXG4gICAgJ1hDVUlFbGVtZW50VHlwZVNjcm9sbFZpZXcnLCB0cnVlKTtcbiAgaWYgKHNjcm9sbFZpZXdzLmxlbmd0aCAhPT0gMSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm9BbGVydE9wZW5FcnJvcigpO1xuICB9XG5cbiAgLy8gaWYgdGhlcmUgaXMgYW4gYWxlcnQsIGl0IHdpbGwgYmUgdGhlIGZpcnN0IHNjcm9sbCB2aWV3XG4gIGNvbnN0IGFsZXJ0ID0gc2Nyb2xsVmlld3NbMF07XG5cbiAgLy8gd2l0aGluIHRoZSBhbGVydCB0aGVyZSBzaG91bGQgYmUgb25lIG9yIHR3byBidXR0b25zIChubyBtb3JlLCBubyBsZXNzKVxuICBjb25zdCBwb3NzaWJsZUFsZXJ0QnV0dG9ucyA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJyxcbiAgICAnWENVSUVsZW1lbnRUeXBlQnV0dG9uJywgdHJ1ZSwgdXRpbC51bndyYXBFbGVtZW50KGFsZXJ0KSk7XG4gIGlmIChwb3NzaWJsZUFsZXJ0QnV0dG9ucy5sZW5ndGggPCAxIHx8IHBvc3NpYmxlQWxlcnRCdXR0b25zLmxlbmd0aCA+IDIpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vQWxlcnRPcGVuRXJyb3IoKTtcbiAgfVxuXG4gIC8vIGRldGVybWluZSB0aGF0IHRoZSBuYW1lIG9mIHRoZSBidXR0b24gaXMgd2hhdCBpcyBleHBlY3RlZFxuICBjb25zdCBhc3NlcnRCdXR0b25OYW1lID0gYXN5bmMgKGJ1dHRvbiwgZXhwZWN0ZWROYW1lID0gJycpID0+IHtcbiAgICBidXR0b24gPSB1dGlsLnVud3JhcEVsZW1lbnQoYnV0dG9uKTtcbiAgICBjb25zdCBuYW1lID0gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7YnV0dG9ufS9hdHRyaWJ1dGUvbmFtZWAsICdHRVQnKTtcbiAgICBpZiAobmFtZT8udG9Mb3dlckNhc2UoKSAhPT0gZXhwZWN0ZWROYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9BbGVydE9wZW5FcnJvcigpO1xuICAgIH1cbiAgfTtcblxuICBpZiAocG9zc2libGVBbGVydEJ1dHRvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gbWFrZSBzdXJlIHRoZSBidXR0b24gaXMgJ0Nsb3NlJ1xuICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gcG9zc2libGVBbGVydEJ1dHRvbnNbMF07XG4gICAgYXdhaXQgYXNzZXJ0QnV0dG9uTmFtZShjbG9zZUJ1dHRvbiwgJ2Nsb3NlJyk7XG5cbiAgICAvLyBhZGQgYSBmdW5jdGlvbiBvbiB0aGUgYWxlcnQgdG8gY2xvc2UgYnkgY2xpY2tpbmcgdGhlICdDbG9zZScgYnV0dG9uXG4gICAgYWxlcnQuY2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHt1dGlsLnVud3JhcEVsZW1lbnQoY2xvc2VCdXR0b24pfS9jbGlja2AsICdQT1NUJyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlbnN1cmUgdGhlIGJ1dHRvbnMgYXJlICdDYW5jZWwnIGFuZCAnT0snXG4gICAgY29uc3QgZmlyc3RCdXR0b24gPSBwb3NzaWJsZUFsZXJ0QnV0dG9uc1swXTtcbiAgICBhd2FpdCBhc3NlcnRCdXR0b25OYW1lKGZpcnN0QnV0dG9uLCAnY2FuY2VsJyk7XG4gICAgY29uc3Qgc2Vjb25kQnV0dG9uID0gcG9zc2libGVBbGVydEJ1dHRvbnNbMV07XG4gICAgYXdhaXQgYXNzZXJ0QnV0dG9uTmFtZShzZWNvbmRCdXR0b24sICdvaycpO1xuXG4gICAgLy8gYWRkIGNhbmNlbCBmdW5jdGlvbiB0byB0aGUgYWxlcnQsIGNsaWNraW5nIHRoZSAnQ2FuY2VsJyBidXR0b25cbiAgICBhbGVydC5jYW5jZWwgPSBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHt1dGlsLnVud3JhcEVsZW1lbnQoZmlyc3RCdXR0b24pfS9jbGlja2AsICdQT1NUJyk7XG4gICAgfTtcbiAgICAvLyBhZGQgb2sgZnVuY3Rpb24gdG8gdGhlIGFsZXJ0LCBjbGlja2luZyB0aGUgJ09LJyBidXR0b25cbiAgICBhbGVydC5vayA9IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke3V0aWwudW53cmFwRWxlbWVudChzZWNvbmRCdXR0b24pfS9jbGlja2AsICdQT1NUJyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIGFkZCBnZXRUZXh0IGZ1bmN0aW9uIHRvIHRoZSBhbGVydCwgZ2V0dGluZyB0aGUgdmFsdWUgb2YgdGhlIGNvcnJlY3QgZWxlbWVudFxuICBhbGVydC5nZXRUZXh0ID0gYXN5bmMgKCkgPT4ge1xuICAgIC8vIGlPUyB1cCB0byAxMy4zIHdpbGwgcmVwb3J0IGEgc2luZ2xlIHRleHQgdmlldywgd2hpbGUgMTMuNCB3aWxsIGhhdmUgdHdvXG4gICAgLy8gYnV0IHRoZSBfbGFzdF8gb25lIHdpbGwgYmUgdGhlIG9uZSBwcmVzZW50aW5nIHRoZSB0ZXh0IG9mIHRoZSBhbGVydFxuICAgIGNvbnN0IHRleHRWaWV3cyA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZVRleHRWaWV3JywgdHJ1ZSwgdXRpbC51bndyYXBFbGVtZW50KGFsZXJ0KSk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke3V0aWwudW53cmFwRWxlbWVudChfLmxhc3QodGV4dFZpZXdzKSl9L2F0dHJpYnV0ZS92YWx1ZWAsICdHRVQnKTtcbiAgfTtcbiAgLy8gYWRkIHNldFRleHQgZnVuY3Rpb24gdG8gdGhlIGFsZXJ0LCBzZXR0aW5nIHRoZSB2YWx1ZSBvZiB0aGUgdGV4dCBmaWVsZCBlbGVtZW50XG4gIGFsZXJ0LnNldFRleHQgPSBhc3luYyAodmFsdWUpID0+IHtcbiAgICBjb25zdCB0ZXh0Vmlld3MgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnY2xhc3MgbmFtZScsICdYQ1VJRWxlbWVudFR5cGVUZXh0RmllbGQnLCB0cnVlLCB1dGlsLnVud3JhcEVsZW1lbnQoYWxlcnQpKTtcbiAgICBpZiAodGV4dFZpZXdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmllZCB0byBzZXQgdGV4dCBvZiBhbiBhbGVydCB0aGF0IHdhcyBub3QgYSBwcm9tcHQnKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7dXRpbC51bndyYXBFbGVtZW50KHRleHRWaWV3c1swXSl9L3ZhbHVlIGAsICdQT1NUJywge3ZhbHVlfSk7XG4gIH07XG5cbiAgcmV0dXJuIGFsZXJ0O1xufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvYWxlcnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
