"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appInfoFromDict = appInfoFromDict;
exports.pageArrayFromDict = pageArrayFromDict;
exports.getDebuggerAppKey = getDebuggerAppKey;
exports.getPossibleDebuggerAppKeys = getPossibleDebuggerAppKeys;
exports.checkParams = checkParams;
exports.wrapScriptForFrame = wrapScriptForFrame;
exports.getScriptForAtom = getScriptForAtom;
exports.simpleStringify = simpleStringify;
exports.deferredPromise = deferredPromise;
exports.convertResult = convertResult;
exports.RESPONSE_LOG_LENGTH = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _atoms = _interopRequireDefault(require("./atoms"));

var _lodash = _interopRequireDefault(require("lodash"));

var _assert = _interopRequireDefault(require("assert"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

const WEB_CONTENT_BUNDLE_ID = 'com.apple.WebKit.WebContent';
const SAFARI_WEB_VIEW_BUNDLE_ID = 'process-SafariViewService';
const SAFARI_WEB_VIEW_FULL_BUNDLE_ID = 'com.apple.SafariViewService';
const WILDCARD_BUNDLE_ID = '*';
const ACCEPTED_PAGE_TYPES = ['WIRTypeWeb', 'WIRTypeWebPage', 'WIRTypePage'];
const RESPONSE_LOG_LENGTH = 100;
exports.RESPONSE_LOG_LENGTH = RESPONSE_LOG_LENGTH;

function appInfoFromDict(dict) {
  const id = dict.WIRApplicationIdentifierKey;
  const isProxy = _lodash.default.isString(dict.WIRIsApplicationProxyKey) ? dict.WIRIsApplicationProxyKey.toLowerCase() === 'true' : dict.WIRIsApplicationProxyKey;
  let isAutomationEnabled = !!dict.WIRRemoteAutomationEnabledKey;

  if (_lodash.default.has(dict, 'WIRAutomationAvailabilityKey')) {
    if (_lodash.default.isString(dict.WIRAutomationAvailabilityKey)) {
      isAutomationEnabled = dict.WIRAutomationAvailabilityKey === 'WIRAutomationAvailabilityUnknown' ? 'Unknown' : dict.WIRAutomationAvailabilityKey === 'WIRAutomationAvailabilityAvailable';
    } else {
      isAutomationEnabled = !!dict.WIRAutomationAvailabilityKey;
    }
  }

  const entry = {
    id,
    isProxy,
    name: dict.WIRApplicationNameKey,
    bundleId: dict.WIRApplicationBundleIdentifierKey,
    hostId: dict.WIRHostApplicationIdentifierKey,
    isActive: dict.WIRIsApplicationActiveKey,
    isAutomationEnabled
  };
  return [id, entry];
}

function pageArrayFromDict(pageDict) {
  if (pageDict.id) {
    return [pageDict];
  }

  let newPageArray = [];

  for (const dict of _lodash.default.values(pageDict)) {
    if (_lodash.default.isUndefined(dict.WIRTypeKey) || ACCEPTED_PAGE_TYPES.includes(dict.WIRTypeKey)) {
      newPageArray.push({
        id: dict.WIRPageIdentifierKey,
        title: dict.WIRTitleKey,
        url: dict.WIRURLKey,
        isKey: !_lodash.default.isUndefined(dict.WIRConnectionIdentifierKey)
      });
    }
  }

  return newPageArray;
}

function getDebuggerAppKey(bundleId, appDict) {
  let appId;

  for (const [key, data] of _lodash.default.toPairs(appDict)) {
    if (data.bundleId === bundleId) {
      appId = key;
      break;
    }
  }

  if (appId) {
    _logger.default.debug(`Found app id key '${appId}' for bundle '${bundleId}'`);

    let proxyAppId;

    for (const [key, data] of _lodash.default.toPairs(appDict)) {
      if (data.isProxy && data.hostId === appId) {
        _logger.default.debug(`Found separate bundleId '${data.bundleId}' ` + `acting as proxy for '${bundleId}', with app id '${key}'`);

        proxyAppId = key;
      }
    }

    if (proxyAppId) {
      appId = proxyAppId;

      _logger.default.debug(`Using proxied app id '${appId}'`);
    }
  }

  return appId;
}

function appIdForBundle(bundleId, appDict) {
  let appId;

  for (const [key, data] of _lodash.default.toPairs(appDict)) {
    if (data.bundleId.endsWith(bundleId)) {
      appId = key;
      break;
    }
  }

  if (!appId && bundleId !== WEB_CONTENT_BUNDLE_ID) {
    return appIdForBundle(WEB_CONTENT_BUNDLE_ID, appDict);
  }

  return appId;
}

function getPossibleDebuggerAppKeys(bundleIds, appDict) {
  let proxiedAppIds = [];

  const possibleBundleIds = _lodash.default.uniq([SAFARI_WEB_VIEW_BUNDLE_ID, SAFARI_WEB_VIEW_FULL_BUNDLE_ID, WILDCARD_BUNDLE_ID, ...bundleIds]);

  _logger.default.debug(`Checking for bundle identifiers: ${possibleBundleIds.join(', ')}`);

  for (const bundleId of possibleBundleIds) {
    const appId = appIdForBundle(bundleId, appDict);

    if (appId) {
      proxiedAppIds.push(appId);

      _logger.default.debug(`Found app id key '${appId}' for bundle '${bundleId}'`);

      for (const [key, data] of _lodash.default.toPairs(appDict)) {
        if (data.isProxy && data.hostId === appId) {
          _logger.default.debug(`Found separate bundleId '${data.bundleId}' ` + `acting as proxy for '${bundleId}', with app id '${key}'`);

          proxiedAppIds.push(key);
        }
      }
    }
  }

  return _lodash.default.uniq(proxiedAppIds);
}

function checkParams(params) {
  let errors = [];

  for (const [param, value] of _lodash.default.toPairs(params)) {
    try {
      _assert.default.ok(value);
    } catch (err) {
      errors.push(param);
    }
  }

  if (errors.length) {
    return errors;
  }
}

async function wrapScriptForFrame(script, frame) {
  _logger.default.debug(`Wrapping script for frame '${frame}'`);

  let elFromCache = await (0, _atoms.default)('get_element_from_cache');
  return `(function (window) { var document = window.document; ` + `return (${script}); })((${elFromCache.toString('utf8')})(${JSON.stringify(frame)}))`;
}

async function getScriptForAtom(atom, args, frames, asyncCallBack = null) {
  let atomSrc = await (0, _atoms.default)(atom);
  let script;

  if (frames.length > 0) {
    script = atomSrc;

    for (const frame of frames) {
      script = await wrapScriptForFrame(script, frame);
    }
  } else {
    _logger.default.debug(`Executing '${atom}' atom in default context`);

    script = `(${atomSrc})`;
  }

  args = args.map(JSON.stringify);

  if (asyncCallBack) {
    script += `(${args.join(',')}, ${asyncCallBack}, true )`;
  } else {
    script += `(${args.join(',')})`;
  }

  return script;
}

function simpleStringify(value, multiline = false) {
  if (!value) {
    return JSON.stringify(value);
  }

  let cleanValue = _lodash.default.clone(value);

  for (const property of ['ceil', 'clone', 'floor', 'round', 'scale', 'toString']) {
    delete cleanValue[property];
  }

  return multiline ? JSON.stringify(cleanValue, null, 2) : JSON.stringify(cleanValue);
}

function deferredPromise() {
  let resolve;
  let reject;
  const promise = new _bluebird.default((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return {
    promise,
    resolve,
    reject
  };
}

function convertResult(res) {
  if (_lodash.default.isUndefined(res)) {
    throw new Error(`Did not get OK result from remote debugger. Result was: ${_lodash.default.truncate(simpleStringify(res), {
      length: RESPONSE_LOG_LENGTH
    })}`);
  } else if (_lodash.default.isString(res)) {
    try {
      res = JSON.parse(res);
    } catch (err) {}
  } else if (!_lodash.default.isObject(res)) {
    throw new Error(`Result has unexpected type: (${typeof res}).`);
  }

  if (res.status && res.status !== 0) {
    throw (0, _appiumBaseDriver.errorFromMJSONWPStatusCode)(res.status, res.value.message || res.value);
  }

  let value = _lodash.default.has(res, 'value') ? res.value : res;

  if (_lodash.default.isObject(value)) {
    for (const property of ['ceil', 'clone', 'floor', 'round', 'scale', 'toString']) {
      delete value[property];
    }
  }

  return value;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
